<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!-- 
  	namespace属性是名称空间的意思。
  	功能相当于 给配置文件定义一个包名。
  	一般情况下。可以写两种值，一种是对应类的全类名
  	一种情况是。对应类的处理接口全类名（后面讲）。
   -->
<mapper namespace="com.atguigu.mapper.UserMapper">

	<!--
		if语句
	 -->
	<select id="queryUsersByNameAndSex" parameterType="com.atguigu.bean.User" resultType="com.atguigu.bean.User">
		select id,last_name lastName,sex  from t_user where
		<!-- 我们希望动态的创建这个条件语句 -->
		<if test="lastName != null">
			last_name like concat('%',#{ lastName },'%')
		</if>
		<if test="sex == 0 or sex == 1">
			and sex = #{sex}
		</if>
	</select>

	<!--
		where - if语句
	 -->
	<select id="queryUsersByNameAndSex1" parameterType="com.atguigu.bean.User" resultType="com.atguigu.bean.User">
		select id,last_name lastName,sex  from t_user
		<where>
			<!-- 我们希望动态的创建这个条件语句 -->
			<if test="lastName != null">
				last_name like concat('%',#{ lastName },'%')
			</if>
			<if test="sex == 0 or sex == 1">
				and sex = #{sex}
			</if>
		</where>
	</select>


	<!--
            trim - if 语句
         -->
	<select id="queryUsersByNameAndSex2" parameterType="com.atguigu.bean.User" resultType="com.atguigu.bean.User">
		select id,last_name lastName,sex  from t_user
		<!--
			trim 可以动态在包含的语句前面和后面添加内容。也可以去掉前面或者后面给定的内容
				prefix 前面添加内容
				suffix 后面添加内容
				suffixOverrides 去掉的后面内容
				prefixOverrides 去掉的前面内容
		 -->
		<trim prefix="where" suffixOverrides="and" prefixOverrides="">
			<!-- 我们希望动态的创建这个条件语句 -->
			<if test="lastName != null">
				last_name like concat('%',#{ lastName },'%') and
			</if>
			<if test="sex == 0 or sex == 1">
				sex = #{sex}
			</if>
		</trim>
	</select>

	<!--
            choose when otherwise 语句
            有点类似于switch case 多路判断。只执行一路。
         -->
	<select id="queryUsersByNameAndSexForChoose" parameterType="com.atguigu.bean.User"
			resultType="com.atguigu.bean.User">
		select id,last_name lastName,sex  from t_user
		<where>
			<choose>
				<when test="id > 0">
					id = #{ id }
				</when>
				<when test="lastName != null">
					last_name = #{lastName}
				</when>
				<otherwise>
					1 = 1
				</otherwise>
			</choose>
		</where>
	</select>


	<!--
            update语句
            set标签，可以去掉，多个列中的逗号
         -->
	<update id="updateUserForSet" parameterType="com.atguigu.bean.User">
		update t_user
		<set>
			<if test="lastName != null">
				last_name = #{lastName},
			</if>
			<if test="sex == 0 or sex == 1">
				sex = #{sex}
			</if>
		</set>
		where id = #{id}
	</update>

	<!--
            foreach语句可以遍历输出数据
                collection属性设置遍历的集合
                open 属性设置遍历输出前的内容
                close 属性设置遍历输出后的内容
                separator 属性设置每输出一个元素中间的间隔内容
                item 属性 当前正在遍历到的数据名
         -->
	<select id="queryUserByidsForIn" resultType="com.atguigu.bean.User">
		select id,last_name,sex from t_user
		where
		id in
		<foreach collection="ids" open="(" close=")" separator="," item="item_id">
			#{item_id}
		</foreach>
	</select>




</mapper>


